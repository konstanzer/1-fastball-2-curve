train = nola[index,]
test = nola[-index,]
train$pitch_type[train$pitch_type==1] = 0
train$pitch_type[train$pitch_type==2] = 1
train$pitch_type[train$pitch_type==3] = 1
test$pitch_type[test$pitch_type==1] = 0
test$pitch_type[test$pitch_type==2] = 1
test$pitch_type[test$pitch_type==3] = 1
View(test)
mode(test$pitch_type)
Mode(test$pitch_type)
library(tree)
library(Metrics)
nola = read.csv("Nola_binomial.csv")
index = 1:9924 #start of game
train = nola[index,]
View(train)
test = nola[-index,]
View(test)
#baseline
base.preds = rep(FALSE, length(train$pitch_type))
sum(train$pitch_type)
sum(train$pitch_type)/length(train$pitch_type)
accuracy(base.preds,train.y)
table(base.preds,train.y)
#baseline
base.preds = rep(TRUE, length(train$pitch_type))
sum(train$pitch_type)
sum(train$pitch_type)/length(train$pitch_type)
accuracy(base.preds,train.y)
#baseline
base.preds = rep(TRUE, length(test$pitch_type))
sum(test$pitch_type)
sum(test$pitch_type)/length(test$pitch_type)
accuracy(base.preds,test$pitch_type)
table(base.preds,test$pitch_type)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
summary(glm.fit)
glm.probs = predict(glm.fit, test, type='response')
glm.probs
summary(glm.fit)
View(train)
nola = read.csv("Nola_binomial.csv")
index = 1:9924 #start of game
train = nola[index,]
test = nola[-index,]
View(nola)
View(test)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
alias(glm.fit)
cor(glm.fit)
cor(train)
alias(glm.fit)
alias(glm.fit)
summary(glm.fit)
glm.probs
glm.pred = rep(FALSE, 10000)
glm.pred[glm.probs > .5] = TRUE
table(glm.pred, test$churn)
glm.pred
#baseline
base.preds = rep(1, length(test$pitch_type))
sum(test$pitch_type)
sum(test$pitch_type)/length(test$pitch_type)
accuracy(base.preds,test$pitch_type)
table(base.preds,test$pitch_type)
glm.probs = predict(glm.fit, test, type='response')
glm.probs
glm.probs = predict(glm.fit, test, type='response')
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .5] = TRUE
glm.pred
table(glm.pred, test$pitch_type)
accuracy(test$churn, glm.pred)
accuracy(glm.pred,test$pitch_type)
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .45] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .44] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .43] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .53] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .51] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .47] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .48] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .46] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .44] = TRUE
glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .44] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .43] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred[glm.probs > .42] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .41] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .4] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .39] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
auc(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .38] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .37] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .36] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
recall(glm.pred,test$pitch_type)
precision(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .405] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .408] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .41] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
glm.pred = rep(0, length(test$pitch_type))
glm.pred[glm.probs > .409] = TRUE
#glm.pred
table(glm.pred,test$pitch_type)
accuracy(glm.pred,test$pitch_type)
#baseline
base.preds = rep(1, length(train$pitch_type))
sum(train$pitch_type)
sum(train$pitch_type)/length(train$pitch_type)
accuracy(base.preds,train$pitch_type)
table(base.preds,train$pitch_type)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
#baseline
base.preds = rep(0, length(train$pitch_type))
sum(train$pitch_type)
sum(train$pitch_type)/length(train$pitch_type)
accuracy(base.preds,train$pitch_type)
table(base.preds,train$pitch_type)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
alias(glm.fit)
glm.probs = predict(glm.fit, train, type='response')
glm.probs
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .409] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .41] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .45] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
recall(glm.pred,train$pitch_type)
precision(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .46] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
recall(glm.pred,train$pitch_type)
precision(glm.pred,train$pitch_type)
auc(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .44] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .55] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
recall(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .5] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .49] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .48] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .47] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .46] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred[glm.probs > .45] = TRUE
#glm.pred
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
recall(glm.pred,train$pitch_type)
alias(glm.fit)
summary(glm.fit)
View(train)
#Drop some stuff
train <- subset(train, select=-c(12,17,18))
test <- subset(test, select=-c(12,17,18))
View(test)
train$columns
cols(train)
columns(train)
colnames(train)
train = nola[index,]
test = nola[-index,]
colnames(train)
#Drop some stuff
train <- subset(train, select=-c(3,8,12,17,18,24))
test <- subset(test, select=-c(3,8,12,17,18,24))
colnames(train)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
alias(glm.fit)
train = nola[index,]
test = nola[-index,]
#Drop some stuff
train <- subset(train, select=-c(3,8,12,17,18,24))
test <- subset(test, select=-c(3,8,12,17,18,24))
colnames(train)
train = nola[index,]
test = nola[-index,]
#Drop some stuff
colnames(train)
train <- subset(train, select=-c(3,5,6,8,12,17,18,20,24))
test <- subset(test, select=-c(3,5,6,8,12,17,18,20,24))
colnames(train)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
train = nola[index,]
test = nola[-index,]
#Drop some stuff
colnames(train)
train <- subset(train, select=-c(3,5,6,8,12,16,17,18,20,24))
test <- subset(test, select=-c(3,5,6,8,12,16,17,18,20,24))
colnames(train)
#glm
glm.fit = glm(train$pitch_type~., data=train, family='binomial')
summary(glm.fit)
alias(glm.fit)
glm.probs = predict(glm.fit, train, type='response')
glm.probs
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .45] = TRUE
#glm.pred - 58% accuracy
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .44] = TRUE
#glm.pred - 58% accuracy
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .46] = TRUE
#glm.pred - 58% accuracy
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
glm.pred = rep(0, length(train$pitch_type))
glm.pred[glm.probs > .45] = TRUE
#glm.pred - 58% accuracy
table(glm.pred,train$pitch_type)
accuracy(glm.pred,train$pitch_type)
recall(glm.pred,train$pitch_type)
precision(glm.pred,train$pitch_type)
auc(glm.pred,train$pitch_type)
#knn
library(class)
train.X = model.matrix(train$pitch_type~., train)[,-1]
test.X = model.matrix(test$pitch_type~., test)[,-1]
train.X = scale(train.X)
test.X = scale(test.X)
train.y = train$pitch_type
test.y = test$pitch_type
View(train.X)
knn.pred5 = knn(train.X, test.X, train.X, k=5)
knn.pred5 = knn(train.X, test.X, train.y, k=5)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred10)
accuracy(test.y, knn.pred5)
knn.pred5 = knn(train.X, test.X, train.y, k=10)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
knn.pred5 = knn(train.X, test.X, train.y, k=15)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
#Tree nope
tree.train = tree(train$pitch_type~., train)
knn.pred5 = knn(train.X, test.X, train.y, k=3)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
knn.pred5 = knn(train.X, test.X, train.y, k=1)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
knn.pred5 = knn(train.X, test.X, train.y, k=2)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
knn.pred5 = knn(train.X, test.X, train.y, k=4)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
#Tree nope
tree.train = tree(train$pitch_type~., train)
knn.pred5 = knn(train.X, test.X, train.y, k=5)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
#Tree nope
tree.train = tree(train$pitch_type~., train)
knn.pred5 = knn(train.X, test.X, train.y, k=6)
mean(test.y == knn.pred5)
mean(test.y == 1)
table(knn.pred5, test.y)
accuracy(test.y, knn.pred5)
#Tree nope
tree.train = tree(train$pitch_type~., train)
summary(tree.train)
accuracy(base.preds,train$pitch_type)
#Tree
tree.train = tree(train$pitch_type~., train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty=0)
tree.train
tree.pred = predict(tree.train, test, type="class")
#Tree
tree.train = tree(as.factor(train$pitch_type)~., train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty=0)
tree.train
tree.pred = predict(tree.train, test, type="class")
accuracy(tree.pred, test$pitch_code)
table(tree.pred, test$pitch_code)
View(train)
#Tree - nope
tree.train = tree(as.factor(train$pitch_type)~., train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty=0)
#Tree - nope
tree.train = tree(as.factor(train$pitch_type)~balls+strikes, train)
#Tree - nope
attach(train)
tree.train = tree(as.factor(pitch_type)~balls+strikes, train)
View(train)
tree.train = tree(as.factor(pitch_type)~inning+pitch_last, train)
summary(tree.train)
plot(tree.train)
text(tree.train, pretty=0)
summary(tree.train)
View(tree.train)
tree.train = tree(as.factor(pitch_type)~., train)
View(tree.train)
View(train)
#Bagging and Random Forests
library(randomForest)
bag.train = randomForest(X_train, as.factor(y_train),
ntree=50, mtry=3, importance=TRUE, do.trace=50)
bag.train = randomForest(train.X, as.factor(train.y),
ntree=50, mtry=3, importance=TRUE, do.trace=50)
bag.train
bag.train = randomForest(train.X, as.factor(train.y),
ntree=500, mtry=5, importance=TRUE, do.trace=50)
bag.train
yhat.bag = predict(bag.train, newdata=test.X)
table(yhat.bag, test.y)
accuracy(test.y, yhat.bag)
auc(test.y, yhat.bag)
importance(bag.train)
varImpPlot(bag.train)
